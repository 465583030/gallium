// Code generated by go-bindata.
// sources:
// info.plist.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _infoPlistTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x5f\x6f\x9b\x30\x14\xc5\x9f\xcb\xa7\xf0\x50\x1f\x17\x1b\xba\x56\xdd\x2a\x42\xd5\x40\xd2\x45\xcb\x3f\x0d\x3a\x75\x4f\x93\x67\x5c\x62\xd5\xd8\xc8\x36\xf9\x23\xc4\x77\x9f\x9c\xa4\x69\x9a\x84\x87\xbd\x61\xf9\xfc\x0e\xd7\xf7\x9e\x1b\xdc\xaf\x0a\x0e\x16\x54\x69\x26\x45\xd7\xf5\xa1\xe7\x02\x2a\x88\xcc\x98\xc8\xbb\xee\x53\x3a\xe8\x7c\x75\xef\x43\x27\xf8\x14\x4f\xa3\xf4\xf7\xac\x0f\x4a\xce\xb4\x01\xb3\xa7\xde\x68\x18\x01\xb7\x83\xd0\x43\x59\x72\x8a\x50\x9c\xc6\x60\x36\x1a\x26\x29\xf0\xa1\x87\x50\x7f\xe2\x02\x77\x6e\x4c\x79\x87\xd0\x72\xb9\x84\xd8\xaa\x20\x91\x85\x15\x6a\x34\x53\xb2\xa4\xca\xac\x47\x4c\x9b\x8e\x0f\x3d\x98\x99\xcc\x0d\x9d\x60\xeb\xfe\xa1\x9c\xd0\x09\x32\x46\x4c\xe8\x5c\x04\xaf\x74\x1d\xf6\x2a\xc6\xb3\x31\x26\x73\x26\xe8\x34\xd9\x9c\x02\x64\x2f\x9c\x8b\x40\x1b\xc5\x44\x1e\xfa\xd7\x03\xff\xc6\xfb\x16\xa0\xdd\x79\x47\x46\x83\x5e\x25\x32\x4e\x87\x19\x15\x86\xbd\x30\xaa\x8e\xc1\xba\x86\xc7\x92\xa6\x69\xb3\x99\xe0\x82\xb6\x1a\xd8\xcb\x76\x34\xa9\xca\x52\x2a\x43\xb3\x19\xc7\xe6\x45\xaa\x42\xef\x8d\xb0\x52\xd8\x7e\xec\x2d\xc7\x98\x4c\x93\xe7\x43\x27\xf4\xa6\xd9\x78\xc6\x69\x24\x8b\x92\xf1\xd3\xd7\x10\x59\xbc\xb7\x7d\xa3\xd0\x90\xf3\x45\x01\x09\xc7\x22\x87\xfe\x1f\xef\xb8\xbe\x38\x7d\x2b\xe8\x6c\x5f\x6f\x23\xdf\xf3\xae\xda\xa1\x5f\xdb\xb1\x1d\x63\x8f\xe3\x53\x24\x89\x7f\x9c\x1f\xdd\x4d\x74\xfd\xe5\xac\xfc\x5c\xbb\x0b\x4c\xa4\x5e\xf9\x1e\xf4\xfd\x53\xe6\x99\xc8\xec\x84\xf0\x6e\xaf\xda\xa4\xff\xf1\xe4\x49\xb2\x9b\xa0\x7e\xa8\x8c\x2c\xb0\x61\xe4\x51\xe1\x72\xce\x88\x4e\x96\xcc\xd8\x6c\xe6\x7b\x27\xa3\x2a\x8a\xde\xc9\xef\x2c\x9f\xff\xa4\x5a\xf2\xca\x30\x29\x22\x5c\xe2\xbf\xfc\xa4\xcc\x54\x55\xf4\xe0\xa7\x75\xad\xb0\xc8\x29\xb8\x7c\xa5\xeb\xcf\xe0\x72\x81\x39\xb8\xeb\x02\xd8\x5f\x19\x85\x75\xd3\xd8\xb4\x58\xbe\xae\xad\xc0\xc6\x6e\xeb\x76\x10\x4b\xcb\x7c\xc8\x63\x5d\x53\x91\x35\x8d\x13\xa0\xed\x72\x05\x68\xb3\x7a\xa1\xf3\x2f\x00\x00\xff\xff\xe9\x9e\x25\xe8\x11\x04\x00\x00")

func infoPlistTplBytes() ([]byte, error) {
	return bindataRead(
		_infoPlistTpl,
		"info.plist.tpl",
	)
}

func infoPlistTpl() (*asset, error) {
	bytes, err := infoPlistTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "info.plist.tpl", size: 1041, mode: os.FileMode(420), modTime: time.Unix(1490294366, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"info.plist.tpl": infoPlistTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"info.plist.tpl": &bintree{infoPlistTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

